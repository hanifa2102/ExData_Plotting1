solve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
listOfOps <- makeVector(1:10)
listOfOps$get
listOfOps$get()
listOfOps$getmean()
mean(1:10)
listOps$setmean(5.5)
listofOps$setmean(5.5)
listOfOps$setmean(5.5)
cachemean(1:10)
x<-1:10
ops<-makeVector(x)
ops$setmean(5.5)
ops$getmean
ops$getmean()
cachemean(x)
cachemean(ops)
y<-2:9
mean(y)
y<-2:10
mean(y)
ops$set(y)
ops$getmean()
cachemean(ops)
cachemean(ops)
makeCacheMatrix <- function(x = matrix()) {
ix <- NULL
set <- function(y) {
x <<- y
ix <<- NULL
}
get <- function() x
setinverse <- function(inverse) ix <<- inverse
getinverse <- function() ix
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
ix <- x$getinverse()
if(!is.null(ix)) {
message("getting cached data")
return(ix)
}
data <- x$get()
ix <- solve(data, ...)
x$setinverse(ix)
ix
}
x<-matrix(1:4,nrow=2,ncol=2)
x
ops<-makeCacheMatrix(x)
ops$get)()
ops$get()
ops$getinverse()
solve(x)
ops$setinverse(solve(x))
ops$getinverse()
cacheSolve(x)
cachesolve(ops)
cacheSolve(ops)
## A pair of functions that cache the inverse of a matrix
## Creates a special matrix object that can cache its inverse
makeCacheMatrix <- function( m = matrix() ) {
## Initialize the inverse property
i <- NULL
## Method to set the matrix
set <- function( matrix ) {
m <<- matrix
i <<- NULL
}
## Method the get the matrix
get <- function() {
## Return the matrix
m
}
## Method to set the inverse of the matrix
setInverse <- function(inverse) {
i <<- inverse
}
## Method to get the inverse of the matrix
getInverse <- function() {
## Return the inverse property
i
}
## Return a list of the methods
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Compute the inverse of the special matrix returned by "makeCacheMatrix"
## above. If the inverse has already been calculated (and the matrix has not
## changed), then the "cachesolve" should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
## Just return the inverse if its already set
if( !is.null(m) ) {
message("getting cached data")
return(m)
}
## Get the matrix from our object
data <- x$get()
## Calculate the inverse using matrix multiplication
m <- solve(data) %*% data
## Set the inverse to the object
x$setInverse(m)
## Return the matrix
m
}
x<-matrix(1:9,nrow=3,nrow=3)
x<-matrix(1:9,nrow=3,ncol=3)
makeCacheMatrix(x)
ops<-makeCacheMatrix(x)
ops$get()
ops$getinverse()
ops$getInverse()
cacheSolve(ops)
?solve
library(datasets)
head(airquality)
str(airquality)
airquality<-transform(airquality,Month=factor(Month))
str(airquality)
?boxplot
boxplot(Ozone~Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,ylab="Ozone(ppb)",xlab="Ozone")
boxplot(Ozone~Month,airquality,ylab="Ozone(ppb)",xlab="Month")
boxplot(Ozone~Month,airquality,ylab="Ozone(ppb)",xlab="Month")
pch
boxplot(Ozone~Month,airquality,ylab="Ozone(ppb)",xlab="Month",col="Green")
par(bg="Pink")
boxplot(Ozone~Month,airquality,ylab="Ozone(ppb)",xlab="Month",col="Green")
?boxplot
par("lty")
x<-rnorm(100)
hist(x)
boxplot(x)
y<-rnorm(100)
plot(x,y)
library(swirl)
swirl()
exit
q
q!
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
t1
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime()
?strptime()
strptime(t3,"%B %d, %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units='days')
install_from_swirl(Data_Analysis)
install_from_swirl("Data_Analysis")
swirl()
10
25
2
1
1
2
12
12
12
12
12
12
11212
55
setwd("C:/Users/Vista/Desktop/Cousera/ExData_Plotting1")
r_data <- read.table("data/household_power_consumption.txt",h=T,sep=";",)
r_data <- read.table("data/household_power_consumption.txt",h=T,sep=";",colClasses = c("character", "character", rep("numeric",7)),na="?")
head(r_data)
r_data <- r_data[r_data$Date="01/02/2007" | r_data$Date="02/02//2007",]
r_data <- r_data[r_data$Date="01/02/2007" | r_data$Date="02/02/2007",]
r_data <- r_data[r_data$Date=="01/02/2007" | r_data$Date=="02/02/2007",]
head(r_data)
r_data <- read.table("data/household_power_consumption.txt",h=T,sep=";",colClasses = c("character", "character", rep("numeric",7)),na="?")
head(r_data)
nrow(r_data)
nrow(r_data[r_data$Date="01/02/2007" | r_data$Date="02/02//2007",])
nrow(r_data[r_data$Date=="01/02/2007" | r_data$Date=="02/02//2007",])
nrow(r_data[r_data$Date=="1/2/2007" | r_data$Date=="2/2/2007",])
nrow(r_data[r_data$Date=="01/02/2007" | r_data$Date=="02/02/2007",])
nrow(r_data[r_data$Date=="1/2/2007" | r_data$Date=="2/2/2007",])
str(r_data)
head(r_data)
summary(r_data)
source("load_data.R")
source("load_data.R")
data <- load_data()
head(data)
source("load_data.R")
load_data
load_data()
source("load_data.R")
data<-load_data()
head(data)
class(data$DateTime)
months(data)
months(data$DateTime)
unique(months(data$DateTime))
unique(weekdays(data$DateTime))
data<-load_data()
head(data)
class(data$DateTime)
source("load_data.R")
data<-load_data()
class(data$DateTime)
hist(Global_active_power)
hist(data$Global_active_power)
plot(data$DateTime,data$Global_active_power)
plot(data$DateTime)
hist(data$Datetime)
lapply(data,class)
plot(data$DateTime,data$Global_active_power)
source("load_data.R")
data <-load_data()
plot(data$DateTime,data$Global_active_power)
plot(data$DateTime,data$Global_active_power,type=1)
plot(data$DateTime,data$Global_active_power,type="1")
plot(data$DateTime,data$Global_active_power)
plot(data$DateTime,data$Global_active_power,type="l")
?plot
plot(data$DateTime,data$Global_active_power,type="h")
x<-rnorm(100)
y<-rnorm(100)
plot(x,y)
plot(x~y)
plot(y,x)
?rnorm
z<-rnorm(100,mean=10,sd=4)
hist(z)
plot(y,x)
plot(z,x)
plot({(x,y) (x,z)})
plot(x,y)
lines(x,z)
points(x,z)
plot(y,x)
plot(x,y,type="l")
plot(data$DateTime,data$Globe_active_power,type="l")
head(data)
data <- load_data()
hist(data$Global_active_power)
png(filename="plot1.png",)
png(filename="plot1.png",width=480,height=480,units="px")
hist(data$Global_active_power,col="orange",main="Global Active Power",xlab="Global Active Power (kilowatts)")
dev.off()
source("plot1.R")
nrow(data)
plot(data$DateTime,data$Global_Active_power,type="l")
plot(data$DateTime,data$Global_active_power,type="l")
plot(data$DateTime,data$Global_active_power,type="l",ylab="Global Active Power(kilowatts)")
plot(data$DateTime,data$Global_active_power,type="l",xlab="",ylab="Global Active Power(kilowatts)")
head(data)
plot(data$DateTime,data$Sub_metering_1,type="l")
?lines
lines(data$DateTime,data$Sub_metering_2,type="l")
lines(data$DateTime,data$Sub_metering_3,type="l")
plot(data$DateTime,data$Sub_metering_1,type="l")
lines(data$DateTime,data$Sub_metering_3,type="l",color="Blue")
?lines
lines(data$DateTime,data$Sub_metering_3,type="l",color="Red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="Red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="red")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
legend("topright",legend=c("one","two","three"))
legend("topright",legend=c("one","two","three"))
legend("topright",pch=1,legend=c("one","two","three"))
?legend
pch=0:18
pch
?legend
legend("topright",lwd=1,legend=c("one","two","three"))
legend("topright",lwd=2,legend=c("one","two","three"))
plot(data$DateTime,data$Sub_metering_1,type="l")
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Global Active Power(kilowatts)")
lines(data$DateTime,data$Sub_metering_2,type="l")
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Global Active Power(kilowatts)")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Global Active Power(kilowatts)")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
legend("topright",
c("Sub_Metering_1","Sub_Metering_2","Sub_Metering_3"))
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Global Active Power(kilowatts)")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
legend("topright",
c("Sub_Metering_1","Sub_Metering_2","Sub_Metering_3"),
lwd=1)
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Global Active Power(kilowatts)")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
legend("topright",
c("Sub_Metering_1","Sub_Metering_2","Sub_Metering_3"),
lwd=1,
col="green")
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Global Active Power(kilowatts)")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
legend("topright",
c("Sub_Metering_1","Sub_Metering_2","Sub_Metering_3"),
lwd=1,
col=c("black","red","blue"
)
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Global Active Power(kilowatts)")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
legend("topright",
c("Sub_Metering_1","Sub_Metering_2","Sub_Metering_3"),
lwd=1,
col=c("black","red","blue")
)
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Energy Sub Metering")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
legend("topright",
c("Sub_Metering_1","Sub_Metering_2","Sub_Metering_3"),
lwd=1,
col=c("black","red","blue")
)
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Energy sub Metering")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
legend("topright",
c("Sub_Metering_1","Sub_Metering_2","Sub_Metering_3"),
lwd=1,
col=c("black","red","blue")
)
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Energy sub metering")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
legend("topright",
c("Sub_Metering_1","Sub_Metering_2","Sub_Metering_3"),
lwd=1,
col=c("black","red","blue")
)
legend("topright",lwd=2,legend=c("one","two","three"))
head(data)
source("plot1.R");source("plot2.R");source("plot3.R")
par(mfrow=c(2,2))
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
str(data)
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(data, {
plot(DateTime,Global_active_power)
plot(DateTime, Voltage)
})
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Energy sub metering")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
legend("topright",
c("Sub_Metering_1","Sub_Metering_2","Sub_Metering_3"),
lwd=1,
col=c("black","red","blue")
)
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(data, {
plot(DateTime,Global_active_power)
plot(DateTime, Voltage)
},type="l")
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Energy sub metering")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
legend("topright",
c("Sub_Metering_1","Sub_Metering_2","Sub_Metering_3"),
lwd=1,
col=c("black","red","blue")
)
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(data, {
plot(DateTime,Global_active_power,type="l")
plot(DateTime, Voltage,type="l")
})
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Energy sub metering")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
legend("topright",
c("Sub_Metering_1","Sub_Metering_2","Sub_Metering_3"),
lwd=1,
col=c("black","red","blue")
)
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(data, {
plot(DateTime,Global_active_power,type="l")
plot(DateTime, Voltage,type="l")
})
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Energy sub metering")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
legend("topright",
c("Sub_Metering_1","Sub_Metering_2","Sub_Metering_3"),
lwd=1,
col=c("black","red","blue")
)
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(data, {
plot(DateTime,Global_active_power,type="l")
plot(DateTime, Voltage,type="l")
})
plot(data$DateTime,data$Sub_metering_1,
type="l",
xlab="",ylab="Energy sub metering")
lines(data$DateTime,data$Sub_metering_2,type="l",col="red")
lines(data$DateTime,data$Sub_metering_3,type="l",col="blue")
legend("topright",
c("Sub_Metering_1","Sub_Metering_2","Sub_Metering_3"),
lwd=1,
col=c("black","red","blue")
)
str(data)
source("plot4.R")
source("plot4.R")
source("plot4.R")
source("plot4.R")
